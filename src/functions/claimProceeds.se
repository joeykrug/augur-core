# Copyright (C) 2015 Forecast Foundation OU, full GPL notice in LICENSE
### This allows users to claim their money from a market by exchanging their shares which hold value

extern controller: [lookup:[int256]:int256, assertIsWhitelisted:[int256]:int256]

MARKETS = self.controller.lookup('markets')
extern markets: [addFees:[int256,int256]:int256, addToMarketsHash:[int256,int256]:int256, getBondsMan:[int256]:int256, getBranch:[int256]:int256, getCumulativeScale:[int256]:int256, getExtraInfo:[int256]:bytes, getExtraInfoLength:[int256]:int256, getFees:[int256]:int256, getGasSubsidy:[int256]:int256, getLastExpDate:[int256]:int256, getMarketEvent:[int256]:int256, getMarketNumOutcomes:[int256]:int256, getMarketResolved:[int256]:int256, getMarketShareContracts:[int256]:int256[], getMarketsHash:[int256]:int256, getOriginalTradingPeriod:[int256]:int256, getOutcomeShareContract:[int256,int256]:int256, getOutcomeShareWallet:[int256,int256]:int256, getParticipantSharesPurchased:[int256,int256,int256]:int256, getPushedForward:[int256]:int256, getSharesPurchased:[int256,int256]:uint256, getSharesValue:[int256]:int256, getTags:[int256]:int256[], getTopic:[int256]:int256, getTotalSharesPurchased:[int256]:int256, getTradingFee:[int256]:int256, getTradingPeriod:[int256]:int256, initializeMarket:[int256,int256,int256,int256,int256,int256,int256,int256,int256,int256,bytes,int256,int256,int256,int256[],int256[]]:int256, modifySharesValue:[int256,int256]:int256, refundClosing:[int256,int256]:int256, setController:[address]:int256, setMarketResolved:[int256]:int256, setPushedForward:[int256,int256,int256]:int256, setTradingFee:[int256,int256]:int256, setTradingPeriod:[int256,int256]:int256, suicideFunds:[address]:_]

EVENTS = self.controller.lookup('events')
extern events: [allowance:[int256,int256]:uint256, approve:[int256,int256]:int256, assertEventIsInAutomatedReportDisputePhase:[int256]:int256, assertEventIsInAutomatedReportPhase:[int256]:int256, assertEventIsInCurrentReportingWindow:[int256]:int256, assertEventIsInDisputePhase:[int256]:int256, assertEventIsInReportingPhase:[int256]:int256, assertEventIsNotDoneWithReporters:[int256]:int256, assertEventIsNotFinalized:[int256]:int256, assertReporterHasRegistrationToken:[int256]:int256, automatedReport:[int256,int256]:_, balanceOf:[int256,int256,int256,int256]:uint256, createEvent:[int256,int256,int256,int256]:int256, disputeAllReporters:[int256]:_, disputeAutomatedReport:[int256]:_, disputeLimitedReporters:[int256]:_, finalizeEvent:[int256]:_, getAutomatedReportDisputeDueTimestamp:[int256]:int256, getAutomatedReportDueTimestamp:[int256]:int256, getEventBranch:[int256]:int256, getNumberOfAllReporterEvents:[int256,int256]:int256, getNumberOfLimitedReporterEvents:[int256,int256]:int256, isEventFinalized:[int256]:int256, migrateEventThroughAllForks:[int256]:int256, migrateEventThroughOneFork:[int256]:int256, privateAdjustTentativeOutcome:[int256,int256]:_, privateBuyToken:[int256,int256,int256,int256]:_, privateRedeemCorrectOutcomeTokens:[int256,int256,int256,int256]:int256, privateTransfer:[int256,int256,int256,int256,int256,int256]:int256, privateTryRedeemTokensForNonForkingEventOnForkedBranch:[int256,int256,int256,int256]:int256, privateTryRedeemTokensOnForkingEvent:[int256,int256,int256,int256]:int256, redeemTokens:[int256,int256,int256]:int256, report:[int256,int256,int256]:int256, totalSupply:[int256,int256,int256]:uint256, transfer:[int256,int256,int256,int256,int256]:int256, transferFrom:[int256,int256,int256,int256,int256,int256]:int256, tryFinalizeEvent:[int256]:int256]

BINARYORCATEGORICALPAYOUTS = self.controller.lookup('binaryOrCategoricalPayouts')
extern binaryOrCategoricalPayouts: [payoutBinaryOrCategoricalMarket:[address,address,address,uint256]:uint256, payoutIndeterminateBinaryOrCategoricalMarket:[address,address,address,uint256]:uint256, setController:[address]:int256, suicideFunds:[address]:_]

SCALARPAYOUTS = self.controller.lookup('scalarPayouts')
extern scalarPayouts: [payoutScalarMarket:[address,address,address]:uint256, setController:[address]:int256, suicideFunds:[address]:_]

MUTEX = self.controller.lookup('mutex')
extern mutex: [acquire:[]:int256, release:[]:int256, setController:[address]:int256, suicideFunds:[address]:_]

extern subcurrency: [allowance:[address,address]:uint256, approve:[address,uint256]:uint256, balanceOf:[address]:uint256, decimals:[]:uint256, name:[]:uint256, symbol:[]:uint256, totalSupply:[]:uint256, transfer:[address,uint256]:uint256, transferFrom:[address,address,uint256]:uint256]

inset('../macros/refund.sem')
inset('../macros/safeMath.sem')
inset('../macros/unitConversions.sem')

data controller

macro THREE_DAYS: 259200

def init():
    self.controller = 0x01

# Claim trading profits/value per share after a market is resolved.
# @public
# @param {address} market Market ID for which to claim proceeds.
# @return {uint256} 1 if successful
def publicClaimProceeds(market: address):
    refund()
    MUTEX.acquire()
    result = self.claimProceeds(msg.sender, market)
    MUTEX.release()
    return(result: uint256)

# Claim trading profits/value per share after a market is resolved.
# @internal
# @param {address} sender
# @param {address} market Market ID for which to claim proceeds.
# @return {uint256} 1 if successful
def claimProceeds(sender: address, market: address):
    refund()
    self.controller.assertIsWhitelisted(msg.sender)
    event = MARKETS.getMarketEvent(market)

    # Can't withdraw funds until 3 days after market resolves
    if(block.timestamp <= EVENTS.getExpiration(event) + THREE_DAYS):
        ~invalid()

    # Market not resolved
    if(!MARKETS.getMarketResolved(market)):
        ~invalid()

    if(EVENTS.getEventType(event) == "scalar"):
        SCALARPAYOUTS.payoutScalarMarket(sender, market, event)

    # Indeterminate categorical and binary markets are resolved with all outcomes having equal values
    elif(EVENTS.getOutcome(event) == ONE_HALF):
        BINARYORCATEGORICALPAYOUTS.payoutIndeterminateBinaryOrCategoricalMarket(sender, market, event, EVENTS.getNumOutcomes(event))

    # Claim winnings for a regular binary or categorical market.
    else:
        BINARYORCATEGORICALPAYOUTS.payoutBinaryOrCategoricalMarket(sender, market, event, EVENTS.getNumOutcomes(event))

    return(1: uint256)

# @controller
def setController(newController: address):
    if(msg.sender != self.controller):
        ~invalid()
    self.controller = newController
    return(1)

# @controller
def suicideFunds(to: address):
    if(msg.sender != self.controller):
        ~invalid()
    suicide(to)