# Copyright (C) 2015 Forecast Foundation OU, full GPL notice in LICENSE

extern controller: [lookup:[str]:address, assertIsWhitelisted:[address]:uint256, assertOnlySpecifiedCaller:[address, str]:_]

extern branch: [a:[]:_]

inset('../macros/refund.sem')

data controller
data branches[]

def init():
    self.controller = 0x0

def any():
    refund()

def getOrCreateBranch(parentBranch, payouts: arr):
    branchId = self.computeBranchId(parentBranch, payouts)
    existingBranch = self.branches[branchId]
    if (existingBranch):
        return(existingBranch)
    newBranch = create('branch.se')
    newBranch.initialize(branchId, parentBranch, payouts:arr)
    self.branches[branchId] = newBranch
    return(newBranch)

def computeBranchId(parentBranch, market, payouts: arr):
    forkingMarket = parentBranch.getForkingMarket()
    if (forkingMarket == 0):
        ~invalid()
    pieces = array(len(payouts) + 2)
    i = 0
    while (i < len(payouts)):
        pieces[i] = payouts[i]
        i += 1
    pieces[i + 0] = parentBranch
    pieces[i + 1] = market
    branchId = sha3(pieces, items = len(pieces))
    return(branchId)


####
#### Assertions
####

def assertBranchIsAugurBranch(branch):
    if (self.branches[branch.getBranchId()] != branch):
        ~invalid()

def assertParentChildRelationship(parentBranch, childBranch):
    self.assertBranchIsAugurBranch(parentBranch)
    self.assertBranchIsAugurBranch(childBranch)
    childBranch.assertIsChildOf(parentBranch)
    parentBranch.assertIsForked()
